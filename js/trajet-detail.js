// trajet-detail.js - Gestion de la page de d√©tail d'un trajet

// Variable globale pour stocker les d√©tails du trajet
let trajetDetails = null;

// Fonction appel√©e au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    // V√©rifier que trajetId est d√©fini
    if (typeof trajetId === 'undefined' || !trajetId) {
        console.error('trajetId non d√©fini');
        alert('Erreur : ID du trajet non trouv√©');
        return;
    }

    console.log('Page de d√©tail charg√©e pour le trajet ID:', trajetId);

    // Charger les d√©tails du trajet
    loadTrajetDetails();
});

// Fonction pour charger les d√©tails du trajet
function loadTrajetDetails() {
    console.log('Chargement des d√©tails du trajet...');
    
    // Cr√©er les donn√©es √† envoyer
    const formData = new FormData();
    formData.append('trajet_id', trajetId);
    
    // Appeler l'API
    fetch('api/get-trajet-detail.php', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Erreur HTTP: ' + response.status);
        }
        return response.json();
    })
    .then(data => {
        console.log('Donn√©es re√ßues:', data);
        
        if (data.success) {
            trajetDetails = data.trajet;
            displayTrajetDetails(data.trajet);
            
            // Masquer le chargement et afficher le contenu
            document.getElementById('loadingSection').style.display = 'none';
            document.getElementById('trajetContent').style.display = 'block';
        } else {
            // Afficher l'erreur
            document.getElementById('loadingSection').style.display = 'none';
            const errorSection = document.getElementById('errorSection');
            if (errorSection) {
                errorSection.style.display = 'block';
            } else {
                alert('Erreur : ' + data.message);
            }
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        document.getElementById('loadingSection').style.display = 'none';
        const errorSection = document.getElementById('errorSection');
        if (errorSection) {
            errorSection.style.display = 'block';
        } else {
            alert('Erreur de chargement du trajet');
        }
    });
}

// ‚úÖ Fonction pour afficher les d√©tails du trajet - VERSION CORRIG√âE
function displayTrajetDetails(trajet) {
    // Indicateur √©cologique
    const isEco = trajet.type_carburant === 'electrique' || 
                  trajet.type_carburant === 'hybride' || 
                  trajet.type_carburant === 'hydrogene';
    
    if (isEco) {
        document.getElementById('ecoIndicator').textContent = 'üå± Trajet √©cologique';
        document.getElementById('ecoIndicator').classList.remove('hidden');
    }
    
    // ‚úÖ Informations principales avec formatage corrig√©
    document.getElementById('villeDepart').textContent = trajet.ville_depart;
    document.getElementById('villeArrivee').textContent = trajet.ville_arrivee;
    
    // ‚úÖ Date format√©e en fran√ßais complet (ex: "mercredi 22 octobre 2025")
    const dateFrancais = formatDateFrancais(trajet.date_depart);
    document.getElementById('dateDepart').textContent = dateFrancais;
    
    // ‚úÖ Heure extraite du DATETIME (ex: "14:30")
    const heureDepart = extractTimeFromDateTime(trajet.date_depart);
    document.getElementById('heureDepart').textContent = heureDepart;
    
    // ‚úÖ Itin√©raire d√©taill√© avec adresses ou villes
    document.getElementById('adresseDepart').textContent = trajet.adresse_depart || trajet.ville_depart;
    document.getElementById('adresseArrivee').textContent = trajet.adresse_arrivee || trajet.ville_arrivee;
    
    // ‚úÖ Heures d'arriv√©e et d√©part dans l'itin√©raire
    const heureArrivee = extractTimeFromDateTime(trajet.date_arrivee);
    document.getElementById('heureDepartDetail').textContent = 'D√©part √† ' + heureDepart;
    document.getElementById('heureArriveeDetail').textContent = 'Arriv√©e pr√©vue √† ' + heureArrivee;
    
    // ‚úÖ Calcul de la dur√©e entre les deux DATETIME
    const duree = calculateDurationFromDates(trajet.date_depart, trajet.date_arrivee);
    document.getElementById('dureeTrajet').textContent = duree;
    
    // ‚úÖ Informations sur le v√©hicule
    document.getElementById('vehiculeMarque').textContent = trajet.marque || 'Marque inconnue';
    document.getElementById('vehiculeModele').textContent = trajet.modele || 'Mod√®le inconnu';
    document.getElementById('vehiculeCouleur').textContent = capitalizeFirst(trajet.couleur) || 'Non sp√©cifi√©e';
    document.getElementById('vehiculeEnergie').textContent = capitalizeFirst(trajet.type_carburant) || 'Non sp√©cifi√©';
    document.getElementById('vehiculePlaces').textContent = trajet.nombre_places_vehicule || '4';
    
    // Classe sp√©ciale pour v√©hicule √©cologique
    if (isEco) {
        document.getElementById('vehiculeEnergie').classList.add('eco');
    }
    
    // Pr√©f√©rences du conducteur
    displayPreferences(trajet.preferences);
    
    // Avis
    displayAvis(trajet.avis);
    
    // Informations du conducteur
    const initial = trajet.conducteur_pseudo ? trajet.conducteur_pseudo[0].toUpperCase() : '?';
    document.getElementById('driverAvatar').textContent = initial;
    document.getElementById('driverName').textContent = trajet.conducteur_pseudo;
    
    // Note et √©toiles
    const stars = createStarRating(trajet.note_moyenne || 0);
    const ratingElement = document.getElementById('driverRating');
    ratingElement.textContent = ''; // Vider d'abord
    ratingElement.textContent = stars + ' ';
    const spanElement = document.createElement('span');
    spanElement.textContent = `${trajet.note_moyenne || 0}/5 (${trajet.nb_avis || 0} avis)`;
    ratingElement.appendChild(spanElement);
    
    // Statistiques du conducteur
    document.getElementById('totalTrajets').textContent = trajet.total_trajets || 0;
    document.getElementById('memberSince').textContent = formatMemberSince(trajet.membre_depuis);
    
    // Informations de r√©servation
    document.getElementById('prixTrajet').textContent = trajet.prix;
    document.getElementById('placesDisponibles').textContent = trajet.places_disponibles;
    
    // Co√ªt total (prix + commission de 2 cr√©dits)
    const prixNumeric = parseFloat(trajet.prix.toString().replace(/\s/g, ''));
    const coutTotal = prixNumeric + 2;

    // Mettre √† jour le co√ªt total seulement si l'√©l√©ment existe (utilisateur connect√©)
    const coutTotalElement = document.getElementById('coutTotal');
    if (coutTotalElement) {
        coutTotalElement.textContent = coutTotal;
    }
    
    // V√©rifier si l'utilisateur peut r√©server
    if (typeof isLoggedIn !== 'undefined' && isLoggedIn) {
        checkBookingAvailability(trajet, coutTotal);
    }
}

// Fonction pour afficher les pr√©f√©rences
function displayPreferences(preferences) {
    const container = document.getElementById('preferencesContainer');
    if (!container) return;
    
    container.textContent = ''; // Vider avec textContent pour √©viter XSS

    if (!preferences) {
        const p = document.createElement('p');
        p.className = 'no-avis';
        p.textContent = 'Aucune pr√©f√©rence sp√©cifi√©e';
        container.appendChild(p);
        return;
    }
    
    // Pr√©f√©rences standards
    const prefList = [
        { key: 'accepte_fumeur', label: 'üö¨ Fumeur', yes: 'Accept√©', no: 'Non accept√©' },
        { key: 'accepte_animaux', label: 'üêï Animaux', yes: 'Accept√©s', no: 'Non accept√©s' },
        { key: 'accepte_musique', label: 'üéµ Musique', yes: 'Appr√©ci√©e', no: 'Silence pr√©f√©r√©' },
        { key: 'accepte_discussion', label: 'üí¨ Discussion', yes: 'Appr√©ci√©e', no: 'Calme pr√©f√©r√©' }
    ];
    
    prefList.forEach(pref => {
        const value = preferences[pref.key];
        if (value !== undefined) {
            const div = document.createElement('div');
            div.className = `preference-item ${value == 1 ? 'yes' : 'no'}`;
            div.textContent = `${pref.label} ${value == 1 ? '‚úÖ' : '‚ùå'} ${value == 1 ? pref.yes : pref.no}`;
            container.appendChild(div);
        }
    });
    
    // Pr√©f√©rences personnalis√©es
    if (preferences.preferences_autres) {
        const div = document.createElement('div');
        div.className = 'preference-item';
        div.style.gridColumn = '1 / -1';
        div.textContent = `üìù ${preferences.preferences_autres}`;
        container.appendChild(div);
    }
}

// Fonction pour afficher les avis
function displayAvis(avis) {
    const container = document.getElementById('avisContainer');
    if (!container) return;

    container.textContent = ''; // Vider avec textContent

    if (!avis || avis.length === 0) {
        const p = document.createElement('p');
        p.className = 'no-avis';
        p.textContent = 'Aucun avis pour le moment';
        container.appendChild(p);
        return;
    }

    avis.forEach(item => {
        const div = document.createElement('div');
        div.className = 'avis-item';

        const stars = '‚≠ê'.repeat(item.note);

        // Cr√©er les √©l√©ments de mani√®re s√©curis√©e
        const header = document.createElement('div');
        header.className = 'avis-header';

        const authorSpan = document.createElement('span');
        authorSpan.className = 'avis-author';
        authorSpan.textContent = item.auteur;

        const ratingSpan = document.createElement('span');
        ratingSpan.className = 'avis-rating';
        ratingSpan.textContent = stars;

        header.appendChild(authorSpan);
        header.appendChild(ratingSpan);

        const commentP = document.createElement('p');
        commentP.className = 'avis-comment';
        commentP.textContent = item.commentaire || 'Aucun commentaire';

        div.appendChild(header);
        div.appendChild(commentP);
        container.appendChild(div);
    });
}

// Fonction pour v√©rifier la disponibilit√© de r√©servation
function checkBookingAvailability(trajet, coutTotal) {
    const btnParticiper = document.getElementById('btnParticiper');
    if (!btnParticiper) return;
    
    // V√©rifier si l'utilisateur est le conducteur
    if (typeof userId !== 'undefined' && userId && parseInt(trajet.id_conducteur) === parseInt(userId)) {
        btnParticiper.textContent = 'Vous √™tes le conducteur';
        btnParticiper.disabled = true;
        return;
    }
    
    // V√©rifier si d√©j√† r√©serv√©
    if (trajet.deja_reserve) {
        btnParticiper.textContent = 'D√©j√† r√©serv√©';
        btnParticiper.disabled = true;
        return;
    }
    
    // V√©rifier les cr√©dits
    if (typeof userCredits !== 'undefined' && userCredits !== null && parseFloat(userCredits) < coutTotal) {
        btnParticiper.textContent = 'Cr√©dits insuffisants';
        btnParticiper.disabled = true;
        return;
    }
    
    // V√©rifier les places disponibles
    if (trajet.places_disponibles <= 0) {
        btnParticiper.textContent = 'Complet';
        btnParticiper.disabled = true;
        return;
    }
}

// Fonction pour participer au trajet
function participerTrajet() {
    console.log('Demande de participation au trajet');
    
    if (!trajetDetails) return;
    
    // Calculer le co√ªt total
    const prixNumeric = parseFloat(trajetDetails.prix.toString().replace(/\s/g, ''));
    const coutTotal = prixNumeric + 2;
    
    // Afficher le modal de confirmation
    document.getElementById('modalCout').textContent = coutTotal;
    document.getElementById('modalTrajet').textContent = 
        trajetDetails.ville_depart + ' ‚Üí ' + trajetDetails.ville_arrivee;
    document.getElementById('modalDate').textContent = 
        formatDateFrancais(trajetDetails.date_depart) + ' √† ' + extractTimeFromDateTime(trajetDetails.date_depart);
    
    document.getElementById('confirmModal').style.display = 'flex';
}

// Fonction pour fermer le modal
function closeModal() {
    document.getElementById('confirmModal').style.display = 'none';
}

// Fonction pour fermer la banni√®re flottante
function closeFloatingBanner() {
    const banner = document.getElementById('floatingBanner');
    if (banner) {
        banner.classList.add('closing');
        setTimeout(() => {
            banner.style.display = 'none';
        }, 300);
    }
}

// Fermer automatiquement la banni√®re apr√®s 10 secondes
if (typeof isLoggedIn !== 'undefined' && !isLoggedIn) {
    setTimeout(() => {
        closeFloatingBanner();
    }, 10000);
}

// Fonction pour confirmer la r√©servation
function confirmerReservation() {
    console.log('Confirmation de la r√©servation');
    
    // Fermer le modal
    closeModal();
    
    // D√©sactiver le bouton
    const btnParticiper = document.getElementById('btnParticiper');
    if (btnParticiper) {
        btnParticiper.disabled = true;
        btnParticiper.textContent = 'R√©servation en cours...';
    }
    
    // V√©rifier que trajetId existe
    if (typeof trajetId === 'undefined' || !trajetId) {
        alert('Erreur : ID du trajet non trouv√©');
        return;
    }

    // Cr√©er les donn√©es √† envoyer
    const formData = new FormData();
    formData.append('trajet_id', trajetId);
    formData.append('nombre_places', 1); // Pour l'instant, on r√©serve toujours 1 place
    
    // Appeler l'API
    fetch('api/participer-trajet.php', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Erreur HTTP: ' + response.status);
        }
        return response.json();
    })
    .then(data => {
        console.log('R√©ponse de r√©servation:', data);
        
        if (data.success) {
            // R√©servation r√©ussie
            alert('‚úÖ ' + data.message);
            
            if (btnParticiper) {
                // Mettre √† jour l'interface
                btnParticiper.textContent = 'R√©serv√© !';
                btnParticiper.disabled = true;
            }
            
            // Mettre √† jour les cr√©dits affich√©s
            if (data.nouveaux_credits !== undefined) {
                const creditsElement = document.querySelector('.user-credits strong');
                if (creditsElement) {
                    creditsElement.textContent = data.nouveaux_credits;
                }
            }
            
            // Recharger la page apr√®s 2 secondes
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        } else {
            // Erreur
            alert('‚ùå ' + data.message);
            if (btnParticiper) {
                btnParticiper.disabled = false;
                btnParticiper.textContent = 'R√©server ce trajet';
            }
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        alert('‚ùå Une erreur est survenue. Veuillez r√©essayer.');
        if (btnParticiper) {
            btnParticiper.disabled = false;
            btnParticiper.textContent = 'R√©server ce trajet';
        }
    });
}

// ========== FONCTIONS UTILITAIRES ==========

// ‚úÖ Formater une date en fran√ßais complet
function formatDateFrancais(dateString) {
    if (!dateString) return 'Date non d√©finie';
    
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return 'Date invalide';
    
    const options = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric'
    };
    
    return date.toLocaleDateString('fr-FR', options);
}

// ‚úÖ Extraire l'heure depuis un DATETIME complet
function extractTimeFromDateTime(datetimeString) {
    if (!datetimeString) return 'Non d√©fini';
    
    const date = new Date(datetimeString);
    if (isNaN(date.getTime())) return 'Non d√©fini';
    
    return date.toLocaleTimeString('fr-FR', {
        hour: '2-digit',
        minute: '2-digit'
    });
}

// ‚úÖ Calculer la dur√©e entre deux dates compl√®tes
function calculateDurationFromDates(dateDepart, dateArrivee) {
    if (!dateDepart || !dateArrivee) return 'Non calculable';
    
    const depart = new Date(dateDepart);
    const arrivee = new Date(dateArrivee);
    
    if (isNaN(depart.getTime()) || isNaN(arrivee.getTime())) {
        return 'Non calculable';
    }
    
    const diffMs = arrivee - depart;
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    
    if (diffMinutes < 0) return 'Non calculable';
    
    const hours = Math.floor(diffMinutes / 60);
    const minutes = diffMinutes % 60;
    
    if (hours > 0) {
        return `${hours}h${minutes > 0 ? minutes.toString().padStart(2, '0') : ''}`;
    }
    return `${minutes}min`;
}

// Cr√©er les √©toiles pour la notation
function createStarRating(rating) {
    const fullStars = Math.floor(rating);
    let stars = '';
    
    for (let i = 0; i < 5; i++) {
        if (i < fullStars) {
            stars += '‚≠ê';
        } else {
            stars += '‚òÜ';
        }
    }
    
    return stars;
}

// Formater la date d'inscription (membre depuis)
function formatMemberSince(dateString) {
    if (!dateString) return 'Nouveau';
    
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return 'Nouveau';
    
    const month = date.toLocaleDateString('fr-FR', { month: 'short', year: 'numeric' });
    return month.charAt(0).toUpperCase() + month.slice(1);
}

// Mettre la premi√®re lettre en majuscule
function capitalizeFirst(str) {
    if (!str) return '';
    return str.charAt(0).toUpperCase() + str.slice(1);
}
